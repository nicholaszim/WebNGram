<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>FBAL</name></assembly>
<members>
<member name="M:FBAL.Functions.Generics.getDistance``1(System.Collections.Generic.IEnumerable{System.Tuple{``0,System.Int32}},System.Collections.Generic.IEnumerable{System.Tuple{``0,System.Int32}})">

</member>
<member name="M:FBAL.Functions.Generics.seqFloatValue``1(System.Collections.Generic.IEnumerable{System.Tuple{``0,System.Int32}})">

</member>
<member name="M:FBAL.Functions.Generics.desparseMap``3(Microsoft.FSharp.Collections.FSharpMap{``0,``1},Microsoft.FSharp.Collections.FSharpMap{``0,``2})">

</member>
<member name="M:FBAL.Functions.Generics.getMapVal``2(Microsoft.FSharp.Collections.FSharpMap{``0,``1})">

</member>
<member name="M:FBAL.Functions.Generics.getSeqVal``2(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}})">

</member>
<member name="M:FBAL.Functions.Generics.cosineSim(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">

</member>
<member name="M:FBAL.Functions.Generics.CreateCategoryFn``3(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``1,``2},``0)">

</member>
<member name="M:FBAL.Functions.Generics.StoreResource``3(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``1,``2},``0)">

</member>
<member name="M:FBAL.Functions.Generics.ProcessResource``4(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``1,``2},Microsoft.FSharp.Core.FSharpFunc{``2,``3},``0)">

</member>
<member name="M:FBAL.Functions.Generics.generateNGram(System.Int32,System.Collections.Generic.IEnumerable{System.Char})">

</member>
<member name="M:FBAL.Functions.Generics.stripResource(System.Collections.Generic.IEnumerable{System.Char})">

</member>
<member name="M:FBAL.Functions.Generics.mutateSeq(System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.Int32}})">

</member>
<member name="M:FBAL.Functions.Generics.generateArray``2(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}})">

</member>
<member name="M:FBAL.Functions.Generics.generateDict``2(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}})">

</member>
<member name="M:FBAL.Functions.Generics.seqFromMap``2(Microsoft.FSharp.Collections.FSharpMap{``0,``1})">

</member>
<member name="M:FBAL.Functions.Generics.generateMap``2(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}})">

</member>
<member name="T:FBAL.Functions.Manager.CategoryRecord">

</member>
<member name="M:FBAL.Functions.Manager.Compare``1(System.Collections.Generic.IEnumerable{System.Tuple{``0,System.Int32}},System.Collections.Generic.IEnumerable{System.Tuple{``0,System.Int32}})">

</member>
<member name="M:FBAL.Functions.Manager.Process(System.String)">

</member>
<member name="M:FBAL.Functions.Manager.convertToMap``2(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}})">

</member>
<member name="M:FBAL.Functions.Manager.clean``1(``0)">

</member>
<member name="M:FBAL.Functions.Manager.createNgram(System.Collections.Generic.IEnumerable{System.Char})">

</member>
<member name="P:FBAL.Functions.Manager.fetch">

</member>
<member name="M:FBAL.Functions.Manager.callback``1(System.IO.StreamReader,``0)">

</member>
<member name="M:FBAL.Functions.Utilities.fetchUrl``1(Microsoft.FSharp.Core.FSharpFunc{System.IO.StreamReader,Microsoft.FSharp.Core.FSharpFunc{System.String,``0}},System.String)">

</member>
<member name="M:FBAL.Functions.Utilities.WindowText``1(System.Int32,System.Collections.Generic.IEnumerable{``0})">

</member>
<member name="M:FBAL.Functions.Utilities.striptoSeq(System.String,System.String)">

</member>
<member name="M:FBAL.Functions.Utilities.convertSeq``1(System.Char[],System.Collections.Generic.IEnumerable{``0})">

</member>
<member name="M:FBAL.Functions.Utilities.stripString(System.String)">

</member>
<member name="M:FBAL.Functions.Utilities.replaceBlanks(System.Char)">

</member>
<member name="M:FBAL.Functions.Utilities.stripPunctuation(System.String)">

</member>
<member name="M:FBAL.Functions.Utilities.stripNumbers(System.String)">

</member>
<member name="M:FBAL.Functions.Utilities.strip2(System.String,System.String)">

</member>
<member name="M:FBAL.Functions.Utilities.strip(System.String,System.String)">

</member>
<member name="M:FBAL.NgramManager.TextProcessor(System.String)">
 <summary>
 Wrapper for text processing and n-gram creation functions
 </summary>
 <param name="url"></param>
</member>
<member name="M:FBAL.NgramManager.CreateModel(Models.CategoryEnum,System.Collections.Generic.List{Models.Ngram})">
 <summary>
 Function that creates Example model by using specified parameters as input
 </summary>
 <param name="category">Enum value</param>
 <param name="sequence">seq<string, int> value</param>
</member>
<member name="M:FBAL.NgramManager.toIDict``2(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}})">
 <summary>
 Function that takes sequence<'T, 'U> as input and converts it into idictionary obejct.
 </summary>
 <param name="seq">sequence<'T, 'U></param>
</member>
<member name="M:FBAL.NgramManager.NgramProfileGenerator4(System.Int32,System.String)">
 <summary>
 Current working n-gram construction algorithm. Takes text as source and an integer of n-gram size
 </summary>
 <param name="n"></param>
 <param name="text"></param>
</member>
<member name="M:FBAL.NgramManager.Dublicates.NgramProfileGenerator(System.Int32,System.String)">
 <summary>
 Function for generation n-grams using specified text resource.
 </summary>
 <param name="n"></param>
 <param name="text"></param>
</member>
<member name="M:FBAL.NgramManager.Utilities.fetchUrl``1(Microsoft.FSharp.Core.FSharpFunc{System.IO.StreamReader,Microsoft.FSharp.Core.FSharpFunc{System.String,``0}},System.String)">
 <summary>
 FUnction for fetching data from internet resourse using urls
 </summary>
 <param name="callback"></param>
 <param name="url"></param>
</member>
<member name="T:MainProvider.MainConnection">
<summary>Provides the types to access a database, using a LINQ-to-Entities mapping</summary><param name='ConnectionString'>The connection string for the database connection</param><param name='ConnectionStringName'>The name of the connection string for the database connection in the configuration file.</param><param name='LocalSchemaFile'>The local file for the database schema</param><param name='Provider'>The name of the ADO.NET data provider to be used for ssdl generation (default: System.Data.SqlClient)</param><param name='EntityContainer'>The name to use for the EntityContainer in the conceptual model</param><param name='ConfigFile'>The name of the configuration file used for connection strings (default: app.config or web.config is used)</param><param name='DataDirectory'>The name of the data directory, used to replace |DataDirectory| in connection strings (default: the project or script directory)</param><param name='ResolutionFolder'>The folder used to resolve relative file paths at compile-time (default: folder containing the project or script)</param><param name='ForceUpdate'>Require that a direct connection to the database be available at design-time and force the refresh of the local schema file (default: true)</param><param name='Pluralize'>Automatically pluralize or singularize class and member names using English language rules (default: false)</param><param name='SuppressForeignKeyProperties'>Exclude foreign key properties in entity type definitions (default: false)</param>
</member>
</members>
</doc>
